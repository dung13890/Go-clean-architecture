// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/role.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	domain "go-app/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRoleRepository is a mock of RoleRepository interface.
type MockRoleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoleRepositoryMockRecorder
}

// MockRoleRepositoryMockRecorder is the mock recorder for MockRoleRepository.
type MockRoleRepositoryMockRecorder struct {
	mock *MockRoleRepository
}

// NewMockRoleRepository creates a new mock instance.
func NewMockRoleRepository(ctrl *gomock.Controller) *MockRoleRepository {
	mock := &MockRoleRepository{ctrl: ctrl}
	mock.recorder = &MockRoleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleRepository) EXPECT() *MockRoleRepositoryMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockRoleRepository) Fetch(arg0 context.Context) ([]domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0)
	ret0, _ := ret[0].([]domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockRoleRepositoryMockRecorder) Fetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockRoleRepository)(nil).Fetch), arg0)
}

// Find mocks base method.
func (m *MockRoleRepository) Find(ctx context.Context, id int) (*domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockRoleRepositoryMockRecorder) Find(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRoleRepository)(nil).Find), ctx, id)
}

// Store mocks base method.
func (m *MockRoleRepository) Store(ctx context.Context, u *domain.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockRoleRepositoryMockRecorder) Store(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockRoleRepository)(nil).Store), ctx, u)
}

// MockRoleUsecase is a mock of RoleUsecase interface.
type MockRoleUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRoleUsecaseMockRecorder
}

// MockRoleUsecaseMockRecorder is the mock recorder for MockRoleUsecase.
type MockRoleUsecaseMockRecorder struct {
	mock *MockRoleUsecase
}

// NewMockRoleUsecase creates a new mock instance.
func NewMockRoleUsecase(ctrl *gomock.Controller) *MockRoleUsecase {
	mock := &MockRoleUsecase{ctrl: ctrl}
	mock.recorder = &MockRoleUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleUsecase) EXPECT() *MockRoleUsecaseMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockRoleUsecase) Fetch(arg0 context.Context) ([]domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0)
	ret0, _ := ret[0].([]domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockRoleUsecaseMockRecorder) Fetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockRoleUsecase)(nil).Fetch), arg0)
}

// Find mocks base method.
func (m *MockRoleUsecase) Find(ctx context.Context, id int) (*domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockRoleUsecaseMockRecorder) Find(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRoleUsecase)(nil).Find), ctx, id)
}

// Store mocks base method.
func (m *MockRoleUsecase) Store(ctx context.Context, u *domain.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockRoleUsecaseMockRecorder) Store(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockRoleUsecase)(nil).Store), ctx, u)
}

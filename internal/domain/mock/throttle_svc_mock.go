// Code generated by MockGen. DO NOT EDIT.
// Source: throttle_svc.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockThrottleService is a mock of ThrottleService interface.
type MockThrottleService struct {
	ctrl     *gomock.Controller
	recorder *MockThrottleServiceMockRecorder
}

// MockThrottleServiceMockRecorder is the mock recorder for MockThrottleService.
type MockThrottleServiceMockRecorder struct {
	mock *MockThrottleService
}

// NewMockThrottleService creates a new mock instance.
func NewMockThrottleService(ctrl *gomock.Controller) *MockThrottleService {
	mock := &MockThrottleService{ctrl: ctrl}
	mock.recorder = &MockThrottleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThrottleService) EXPECT() *MockThrottleServiceMockRecorder {
	return m.recorder
}

// Blocked mocks base method.
func (m *MockThrottleService) Blocked(ctx context.Context, key, ip string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Blocked", ctx, key, ip)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Blocked indicates an expected call of Blocked.
func (mr *MockThrottleServiceMockRecorder) Blocked(ctx, key, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blocked", reflect.TypeOf((*MockThrottleService)(nil).Blocked), ctx, key, ip)
}

// Clear mocks base method.
func (m *MockThrottleService) Clear(ctx context.Context, key, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear", ctx, key, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockThrottleServiceMockRecorder) Clear(ctx, key, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockThrottleService)(nil).Clear), ctx, key, ip)
}

// Incr mocks base method.
func (m *MockThrottleService) Incr(ctx context.Context, key, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", ctx, key, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// Incr indicates an expected call of Incr.
func (mr *MockThrottleServiceMockRecorder) Incr(ctx, key, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockThrottleService)(nil).Incr), ctx, key, ip)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: password_reset.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPasswordResetRepository is a mock of PasswordResetRepository interface.
type MockPasswordResetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordResetRepositoryMockRecorder
}

// MockPasswordResetRepositoryMockRecorder is the mock recorder for MockPasswordResetRepository.
type MockPasswordResetRepositoryMockRecorder struct {
	mock *MockPasswordResetRepository
}

// NewMockPasswordResetRepository creates a new mock instance.
func NewMockPasswordResetRepository(ctrl *gomock.Controller) *MockPasswordResetRepository {
	mock := &MockPasswordResetRepository{ctrl: ctrl}
	mock.recorder = &MockPasswordResetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordResetRepository) EXPECT() *MockPasswordResetRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockPasswordResetRepository) Delete(ctx context.Context, email, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, email, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPasswordResetRepositoryMockRecorder) Delete(ctx, email, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPasswordResetRepository)(nil).Delete), ctx, email, token)
}

// FindEmailByToken mocks base method.
func (m *MockPasswordResetRepository) FindEmailByToken(ctx context.Context, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEmailByToken", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEmailByToken indicates an expected call of FindEmailByToken.
func (mr *MockPasswordResetRepositoryMockRecorder) FindEmailByToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEmailByToken", reflect.TypeOf((*MockPasswordResetRepository)(nil).FindEmailByToken), ctx, token)
}

// StoreOrUpdate mocks base method.
func (m *MockPasswordResetRepository) StoreOrUpdate(ctx context.Context, email, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreOrUpdate", ctx, email, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreOrUpdate indicates an expected call of StoreOrUpdate.
func (mr *MockPasswordResetRepositoryMockRecorder) StoreOrUpdate(ctx, email, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreOrUpdate", reflect.TypeOf((*MockPasswordResetRepository)(nil).StoreOrUpdate), ctx, email, token)
}

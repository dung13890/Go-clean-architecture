// Code generated by MockGen. DO NOT EDIT.
// Source: internal/modules/role/usecase/role.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "go-app/internal/domain"
	// usecase "go-app/internal/modules/role/usecase"
)

// MockUsecase is a mock of RoleUsecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRoleUsecaseMockRecorder
}

// MockRoleUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockRoleUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockRoleUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockRoleUsecaseMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockUsecase) Fetch(ctx context.Context) ([]domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx)
	ret0, _ := ret[0].([]domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockRoleUsecaseMockRecorder) Fetch(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockUsecase)(nil).Fetch), ctx)
}
